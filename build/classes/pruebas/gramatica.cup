package tiny;

import java_cup.runtime.*;
import ast.*;
//import otros.*;

parser code {:

/***********
SymbolFactory es una nueva caracteristica que ha sido anadida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
, esto debido a que dicha clase no provee mucha informacion de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/
***********/
	public static void main(String args[]) throws Exception {
		SymbolFactory sf = new DefaultSymbolFactory();
		parser parser_obj;
		
                Scanner lexico; 
	 
		  lexico = new Scanner(
		  	new java.io.FileInputStream
		  	("C:/Users/Jeniffer/Desktop/Tiny/ejemplo_fuente/suma.tny"),sf);
		  parser_obj=new parser(lexico,sf);

		/*if (args.length==0) 
			parser_obj=new parser(new Scanner(System.in,sf),sf);
		else 
			parser_obj=new parser(new Scanner(new java.io.FileInputStream((new java.io.FileInputStream(
				" C:/Users/cuenta.inscripcion/Desktop/Tiny/ejemplo_fuente/suma.tny")),sf),sf);
*/
		parser_obj.parse();
		NodoBase root=parser_obj.action_obj.getASTroot();
		System.out.println();
		System.out.println("IMPRESION DEL AST GENERADO");
		System.out.println();
		ast.Util.imprimirAST(root);
		TablaSimbolos ts = new TablaSimbolos();
		ts.cargarTabla(root);
		ts.ImprimirClaves();
		tiny.Generador.setTablaSimbolos(ts);
		tiny.Generador.generarCodigoObjeto(root);
	}

:}

action code {:
	private boolean debug=true;
	private NodoBase ast=null;
	private int lineanum=0;
	private int ambito=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}
	
:}

/* Simbolos Terminales */

terminal IF;
terminal THEN;
terminal ELSE;
terminal END;
terminal REPEAT;
terminal UNTIL;
terminal READ;
terminal WRITE;
terminal String ID;
terminal String NUM;
terminal ASSIGN;
terminal EQ;
terminal LT;
terminal GT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal OVER;
terminal LPAREN;
terminal RPAREN;
terminal SEMI;
terminal COMMA;
terminal INT;
terminal BOOLEAN;
terminal MAIN;
terminal RETURN;
terminal VOID;
terminal LCOR;
terminal RCOR;


/* Simbolos No Terminales */
non terminal program;
non terminal NodoBase stmt_seq;
non terminal NodoBase stmt;
non terminal NodoBase if_stmt;
non terminal NodoBase repeat_stmt;
non terminal NodoBase assign_stmt;
non terminal NodoBase read_stmt;
non terminal NodoBase write_stmt;
non terminal NodoBase exp;
non terminal NodoBase simple_exp;
non terminal NodoBase term;
non terminal NodoBase factor;
non terminal NodoBase block_prog;
non terminal NodoBase main_function;
non terminal NodoBase function_list;
non terminal NodoBase function_stmt;
non terminal NodoBase stmt_params;
non terminal NodoBase call_stmt;
non terminal NodoBase params_call;
non terminal NodoBase declare_var;
non terminal NodoBase return_stmt;
non terminal NodoBase vector;
/* Precedencia de operadores NO USAR FALLA  
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
*/

/* REGLAS GRAMATICALES */
program       	::= block_prog:s {: if(debug) System.out.println("\t regla 1"); 
					ast = s;
					:}
		      	;

block_prog    	::= function_list:fls main_function:mss 
                   {:
					System.out.println("\t FUNCTIONS and MAIN");
					RESULT = new NodoMain(fls,mss,ambito);
					ambito++; 
				   :}

                    |  main_function:msfs
                       {:
                            System.out.println("\t ONLY MAIN");
                            RESULT = new NodoMain(null,msfs,ambito);
                            ambito++; 
                       :}
		;

main_function 	::= MAIN stmt_seq:ssq END
                {: System.out.println("\t Bloque principal");
					RESULT=ssq;
				:}
			  	;

function_list 	::= function_list:flis function_stmt:flsd 
                        {: if(debug) System.out.println("\t regla 2a"); 
                            NodoBase hijoActual = flis;
                            if(hijoActual !=null){
                                while(hijoActual.TieneHermano()){
                                        hijoActual = hijoActual.getHermanoDerecha();
                                }
                                hijoActual.setHermanoDerecha(flsd);
                                RESULT=flis;
                            }else{
                                    RESULT=flsd;
                            }
                        :}
              	| function_stmt:fmsf
              	 {:
              	   if(debug) System.out.println("\t regla 2b"); 
			RESULT=fmsf;				
		:}
              	;
function_stmt 	::= INT ID:nomf LPAREN stmt_params:stsms RPAREN stmt_seq:sds END
                    {: if(debug) System.out.println("\t funcion int "); 

                                         RESULT=new NodoFuncion("INT", nomf.toString(),stsms,sds); 
                                    :}
                | VOID ID:nomf LPAREN stmt_params:stsms RPAREN stmt_seq:sds END
                    {: if(debug) System.out.println("\t funcion void "); 

                                         RESULT=new NodoFuncion("VOID", nomf.toString(),stsms,sds); 
                                    :}
                |  BOOLEAN ID:nomf LPAREN stmt_params:stsms RPAREN stmt_seq:sds END
                    {: if(debug) System.out.println("\t funcion boolean "); 

                                         RESULT=new NodoFuncion("BOOLEAN", nomf.toString(),stsms,sds); 
                                    :}
                | INT ID:nomf LPAREN  RPAREN stmt_seq:sds END
                    {: if(debug) System.out.println("\t funcion int "); 

                                         RESULT=new NodoFuncion("INT", nomf.toString(),sds); 
                                    :}
                | VOID ID:nomf LPAREN  RPAREN stmt_seq:sds END
                    {: if(debug) System.out.println("\t funcion void "); 

                                         RESULT=new NodoFuncion("VOID", nomf.toString(),sds); 
                                    :}
                |  BOOLEAN ID:nomf LPAREN RPAREN stmt_seq:sds END
                    {: if(debug) System.out.println("\t funcion boolean "); 

                RESULT=new NodoFuncion("BOOLEAN", nomf.toString(),sds); 
                    :}
            ;

stmt_seq    	::= stmt_seq:ini SEMI stmt:sent	{: if(debug) System.out.println("\t regla 2a"); 
						NodoBase hijoActual = ini;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=ini;
						}else{
							RESULT=sent;
						}
						:}
                | stmt:sent	{: if(debug) System.out.println("\t regla 2b"); 
				               RESULT=sent;				
				            :}
				;


stmt        	::= if_stmt:sif	{: if(debug) System.out.println("\t regla 3a"); 
									RESULT=sif;
								:}
            	| repeat_stmt:srep {: if(debug) System.out.println("\t regla 3b"); 
									RESULT=srep;
								:}	
            	| assign_stmt:sasi	{: if(debug) System.out.println("\t regla 3c"); 
									RESULT=sasi;
						         :}
            	| read_stmt:slec {: if(debug) System.out.println("\t regla 3d"); 
									RESULT=slec;
								:}	
            	| write_stmt:sesc {: if(debug) System.out.println("\t regla 3e"); 
									RESULT=sesc;
								:}
            	| declare_var:dclv {: if(debug) System.out.println("\t regla 3f"); 
									RESULT=dclv;
								:}
            	| return_stmt:rtst	{: if(debug) System.out.println("\t regla 3g"); 
									RESULT=rtst;
								:}
            	| call_stmt:cllst {: if(debug) System.out.println("\t regla 3h"); 
									RESULT=cllst;
								:}
            	| error			{: if(debug) System.out.println("\t regla 3i"); 
								   System.out.println("Ocurrio error en cup # 0004");
									RESULT=null;
								:}
            	;

if_stmt     	::= IF exp:ex THEN stmt_seq:pthen END	{: if(debug) System.out.println("\t regla 4a"); 
									RESULT = new NodoIf(ex,pthen);
								:}
				| IF exp:ex THEN stmt_seq:pthen ELSE stmt_seq:pelse END	{: if(debug) System.out.println("\t regla 4b"); 
									RESULT = new NodoIf(ex,pthen,pelse);		
								:}
				;
repeat_stmt 	::= REPEAT stmt_seq:cuerpo UNTIL exp:prueba		{: if(debug) System.out.println("\t regla 5"); 
							RESULT = new NodoRepeat(cuerpo,prueba);
							:}
				;

stmt_params  	::= stmt_params:stpar COMMA declare_var:decv {: if(debug) System.out.println("\t regla 6a"); 
						NodoBase hijoActual = stpar;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(decv);
							RESULT=stpar;
						}else{
							RESULT=decv;
						}
						:}
		      	| declare_var:dccv {:  if(debug) System.out.println("\t regla 6b"); 
				       RESULT=dccv;				
				:}
		      
		      	;

call_stmt    	::=   ID:nms LPAREN params_call:pmll RPAREN {: 
					if(debug) System.out.println("\t Llamado a Funcion"); 
					RESULT=new NodoCall(nms.toString(),pmll);
				:}
				;

params_call  	::= params_call:psdll COMMA exp:expss
                        {: 
                            if(debug) System.out.println("\t regla 7a"); 
                            NodoBase hijoActual = psdll;
                            if(hijoActual !=null){
                                    while(hijoActual.TieneHermano()){
                                            hijoActual = hijoActual.getHermanoDerecha();
                                    }
                                    hijoActual.setHermanoDerecha(expss);
                                    RESULT=psdll;
                            }else{
                                    RESULT=expss;
                            }
                        :}  
                    |  exp:exzz {:  if(debug) System.out.println("\t regla 7b"); 
                           RESULT=exzz;				
                         :}
                    | /*empty*/ {: if(debug) System.out.println("\t ** Empty **"); 
                        RESULT=null;
		:}		      
				; 

declare_var  	::= INT ID:idv  
				{:	 if(debug) System.out.println("\t regla 8a"); 
			  	 		System.out.println("\t dec"); 
			  	 		RESULT= new NodoDeclaracion(idv.toString(),"INT");
			   	:}
		| BOOLEAN ID:idv  
				{:	 if(debug) System.out.println("\t regla 8a"); 
			  	 		System.out.println("\t dec"); 
			  	 		RESULT= new NodoDeclaracion(idv.toString(),"INT");
			   	:}

		| INT vector:dsd  
			  	{:	 if(debug) System.out.println("\t regla 8a"); 
			  	 		System.out.println("\t dec"); 
			  	 		RESULT= new NodoDeclaracion(dsd,"INT");
			   	:}

		| BOOLEAN vector:dsd  
			  	{:	 if(debug) System.out.println("\t regla 8a"); 
			  	 		System.out.println("\t dec"); 
			  	 		RESULT= new NodoDeclaracion(dsd, "BOOLEAN");
			   	:}
			  	;

return_stmt   	::= RETURN exp:retm
					{:	 if(debug) System.out.println("\t regla 9"); 
			  	 		System.out.println("\t return"); 
			  	 		RESULT= new NodoReturn(retm);
			   		:}
			  	;

assign_stmt 	::= ID:variable ASSIGN exp:ex
					{: if(debug) System.out.println("\t regla 10 parte final");
							if(variable!=null)
								RESULT = new NodoAsignacion(variable.toString(),ex);
							else{
								RESULT = null;
								System.out.println("Ocurrio error en cup # 0001");
								}
					:}
			 	| vector:vcas ASSIGN exp:exv
			 	{: if(debug) System.out.println("\t regla 10 parte final");
							 
								RESULT = new NodoAsignacion(vcas,exv);
							 
					:}		
				;

vector       	::= ID:vari LCOR NUM:tamv RCOR
					{: if(debug) System.out.println("\t regla 11  ");
							if(vari!=null)
								RESULT = new NodoVector(vari.toString(), Integer.parseInt(tamv));
                                                              //RESULT = new NodoVector(vari.toString(), Integer.parseInt(tamv), new NodoValor(Integer.parseInt(tamv)));
							else{
								RESULT = null;
								System.out.println("Ocurrio error en cup # 0001");
							}
					:}
				;

read_stmt   ::= READ ID:variable	{: if(debug) System.out.println("\t regla 7"); 
					System.out.println("Leyendo Variable");
					if(variable!=null)
					RESULT = new NodoLeer(variable.toString());
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0002");
					}
					:}
		;

write_stmt  ::= WRITE exp:ex	{: if(debug) System.out.println("\t regla 8"); 
					RESULT= new NodoEscribir(ex);
					:}
		;

exp         ::= simple_exp:exI LT simple_exp:exD	{: if(debug) System.out.println("\t regla 9a"); 
								RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
								:} 
		|   simple_exp:exA GT simple_exp:exB	{: if(debug) System.out.println("\t regla 9a"); 
								RESULT = new NodoOperacion(exA,tipoOp.mayor,exB);
								:} 

		| simple_exp:exI EQ simple_exp:exD	{: if(debug) System.out.println("\t regla 9b"); 
							RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
							:}
		| simple_exp:ex	{: if(debug) System.out.println("\t regla 9c"); 
					RESULT = ex;
					:}
		;

simple_exp  ::= simple_exp:exI PLUS term:exD	{: if(debug) System.out.println("\t regla 10a"); 
							RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
							:}
		| simple_exp:exI MINUS term:exD	{: if(debug) System.out.println("\t regla 10b"); 
							RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
							:}
		| term:ex	{: if(debug) System.out.println("\t regla 10c"); 
				RESULT=ex;
				:}
		;

term        ::= term:exI TIMES factor:exD	{: if(debug) System.out.println("\t regla 11a"); 
							RESULT = new NodoOperacion(exI,tipoOp.por,exD);
							:}
		| term:exI OVER factor:exD	{: if(debug) System.out.println("\t regla 11b"); 
						RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
						:}
		| factor:ex	{: if(debug) System.out.println("\t regla 11c"); 
					RESULT=ex;
					:}
		;

factor      ::= LPAREN exp:ex RPAREN	{: if(debug) System.out.println("\t regla 12a"); 
							RESULT = ex;
							:}
		| NUM:valor	{: if(debug) System.out.println("\t regla 12b"); 
					System.out.println("Devolvi nodo numero entero");
					if(valor!=null){
						RESULT= new NodoValor(Integer.parseInt(valor));					
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
				:}
		| ID:variable	{: if(debug) System.out.println("\t regla 12c"); 
					if(variable!=null){
						System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
						RESULT= new NodoIdentificador(variable.toString());		
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					:}
		| error	{: if(debug) System.out.println("\t regla 12d"); 
				System.out.println("Ocurrio error en cup # 0003");
				RESULT=null;
				:}
		;