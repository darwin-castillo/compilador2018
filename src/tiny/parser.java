
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 13 03:04:28 VET 2018
//----------------------------------------------------

package tiny;

import java_cup.runtime.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 13 03:04:28 VET 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\003\000\002\002\004\000\002\016" +
    "\004\000\002\016\003\000\002\017\005\000\002\020\004" +
    "\000\002\020\003\000\002\021\011\000\002\021\011\000" +
    "\002\021\011\000\002\021\010\000\002\021\010\000\002" +
    "\021\010\000\002\003\005\000\002\003\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\005\007\000\002" +
    "\005\011\000\002\006\006\000\002\022\005\000\002\022" +
    "\003\000\002\023\006\000\002\024\005\000\002\024\003" +
    "\000\002\024\002\000\002\025\004\000\002\025\004\000" +
    "\002\025\004\000\002\025\004\000\002\026\004\000\002" +
    "\007\005\000\002\007\005\000\002\027\006\000\002\010" +
    "\004\000\002\011\004\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\003\000\002\013\005\000" +
    "\002\013\005\000\002\013\003\000\002\014\005\000\002" +
    "\014\005\000\002\014\003\000\002\015\005\000\002\015" +
    "\003\000\002\015\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\012\032\004\033\007\034\006\036\011\001" +
    "\002\000\004\014\161\001\002\000\012\032\004\033\007" +
    "\034\006\036\011\001\002\000\024\003\042\004\034\010" +
    "\046\012\030\013\035\014\036\032\023\033\022\035\032" +
    "\001\002\000\004\014\144\001\002\000\004\002\ufffe\001" +
    "\002\000\004\014\016\001\002\000\004\002\015\001\002" +
    "\000\004\002\001\001\002\000\012\032\ufffb\033\ufffb\034" +
    "\ufffb\036\ufffb\001\002\000\004\002\000\001\002\000\004" +
    "\026\017\001\002\000\010\027\021\032\023\033\022\001" +
    "\002\000\006\027\uffe5\031\uffe5\001\002\000\024\003\042" +
    "\004\034\010\046\012\030\013\035\014\036\032\023\033" +
    "\022\035\032\001\002\000\004\014\140\001\002\000\004" +
    "\014\136\001\002\000\006\027\026\031\025\001\002\000" +
    "\006\032\023\033\022\001\002\000\024\003\042\004\034" +
    "\010\046\012\030\013\035\014\036\032\023\033\022\035" +
    "\032\001\002\000\012\006\ufff1\007\ufff1\011\ufff1\030\ufff1" +
    "\001\002\000\004\014\134\001\002\000\004\016\132\001" +
    "\002\000\012\003\056\014\054\015\055\026\062\001\002" +
    "\000\012\006\uffef\007\uffef\011\uffef\030\uffef\001\002\000" +
    "\012\003\056\014\054\015\055\026\062\001\002\000\012" +
    "\003\056\014\054\015\055\026\062\001\002\000\010\016" +
    "\110\026\107\037\106\001\002\000\012\006\uffec\007\uffec" +
    "\011\uffec\030\uffec\001\002\000\006\007\105\030\052\001" +
    "\002\000\012\006\uffed\007\uffed\011\uffed\030\uffed\001\002" +
    "\000\012\006\uffea\007\uffea\011\uffea\030\uffea\001\002\000" +
    "\012\006\ufff2\007\ufff2\011\ufff2\030\ufff2\001\002\000\012" +
    "\006\uffeb\007\uffeb\011\uffeb\030\uffeb\001\002\000\012\006" +
    "\uffee\007\uffee\011\uffee\030\uffee\001\002\000\024\003\042" +
    "\004\034\010\046\012\030\013\035\014\036\032\023\033" +
    "\022\035\032\001\002\000\012\006\ufff0\007\ufff0\011\ufff0" +
    "\030\ufff0\001\002\000\012\006\ufff3\007\ufff3\011\ufff3\030" +
    "\ufff3\001\002\000\006\011\053\030\052\001\002\000\024" +
    "\003\042\004\034\010\046\012\030\013\035\014\036\032" +
    "\023\033\022\035\032\001\002\000\012\003\056\014\054" +
    "\015\055\026\062\001\002\000\036\005\uffca\006\uffca\007" +
    "\uffca\011\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca" +
    "\024\uffca\025\uffca\027\uffca\030\uffca\031\uffca\001\002\000" +
    "\036\005\uffcb\006\uffcb\007\uffcb\011\uffcb\017\uffcb\020\uffcb" +
    "\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\027\uffcb\030" +
    "\uffcb\031\uffcb\001\002\000\036\005\uffc9\006\uffc9\007\uffc9" +
    "\011\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024" +
    "\uffc9\025\uffc9\027\uffc9\030\uffc9\031\uffc9\001\002\000\036" +
    "\005\uffcd\006\uffcd\007\uffcd\011\uffcd\017\uffcd\020\uffcd\021" +
    "\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\027\uffcd\030\uffcd" +
    "\031\uffcd\001\002\000\036\005\uffd0\006\uffd0\007\uffd0\011" +
    "\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\075" +
    "\025\074\027\uffd0\030\uffd0\031\uffd0\001\002\000\032\005" +
    "\uffd3\006\uffd3\007\uffd3\011\uffd3\017\066\020\067\021\070" +
    "\022\071\023\072\027\uffd3\030\uffd3\031\uffd3\001\002\000" +
    "\012\003\056\014\054\015\055\026\062\001\002\000\012" +
    "\006\uffe7\007\uffe7\011\uffe7\030\uffe7\001\002\000\004\027" +
    "\065\001\002\000\036\005\uffcc\006\uffcc\007\uffcc\011\uffcc" +
    "\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025" +
    "\uffcc\027\uffcc\030\uffcc\031\uffcc\001\002\000\012\003\056" +
    "\014\054\015\055\026\062\001\002\000\012\003\056\014" +
    "\054\015\055\026\062\001\002\000\012\003\056\014\054" +
    "\015\055\026\062\001\002\000\012\003\056\014\054\015" +
    "\055\026\062\001\002\000\012\003\056\014\054\015\055" +
    "\026\062\001\002\000\036\005\uffd1\006\uffd1\007\uffd1\011" +
    "\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\075" +
    "\025\074\027\uffd1\030\uffd1\031\uffd1\001\002\000\012\003" +
    "\056\014\054\015\055\026\062\001\002\000\012\003\056" +
    "\014\054\015\055\026\062\001\002\000\036\005\uffcf\006" +
    "\uffcf\007\uffcf\011\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf" +
    "\023\uffcf\024\uffcf\025\uffcf\027\uffcf\030\uffcf\031\uffcf\001" +
    "\002\000\036\005\uffce\006\uffce\007\uffce\011\uffce\017\uffce" +
    "\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\027" +
    "\uffce\030\uffce\031\uffce\001\002\000\036\005\uffd2\006\uffd2" +
    "\007\uffd2\011\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023" +
    "\uffd2\024\075\025\074\027\uffd2\030\uffd2\031\uffd2\001\002" +
    "\000\024\005\uffd5\006\uffd5\007\uffd5\011\uffd5\022\071\023" +
    "\072\027\uffd5\030\uffd5\031\uffd5\001\002\000\024\005\uffd6" +
    "\006\uffd6\007\uffd6\011\uffd6\022\071\023\072\027\uffd6\030" +
    "\uffd6\031\uffd6\001\002\000\024\005\uffd4\006\uffd4\007\uffd4" +
    "\011\uffd4\022\071\023\072\027\uffd4\030\uffd4\031\uffd4\001" +
    "\002\000\012\006\ufff4\007\ufff4\011\ufff4\030\ufff4\001\002" +
    "\000\012\032\ufff9\033\ufff9\034\ufff9\036\ufff9\001\002\000" +
    "\004\015\117\001\002\000\016\003\056\014\054\015\055" +
    "\026\062\027\uffe1\031\uffe1\001\002\000\012\003\056\014" +
    "\054\015\055\026\062\001\002\000\012\006\uffdb\007\uffdb" +
    "\011\uffdb\030\uffdb\001\002\000\006\027\uffe2\031\uffe2\001" +
    "\002\000\006\027\115\031\114\001\002\000\012\003\056" +
    "\014\054\015\055\026\062\001\002\000\012\006\uffe4\007" +
    "\uffe4\011\uffe4\030\uffe4\001\002\000\006\027\uffe3\031\uffe3" +
    "\001\002\000\004\040\120\001\002\000\020\006\uffd9\007" +
    "\uffd9\011\uffd9\016\uffd9\027\uffd9\030\uffd9\031\uffd9\001\002" +
    "\000\012\006\uffd7\007\uffd7\011\uffd7\030\uffd7\001\002\000" +
    "\004\005\123\001\002\000\024\003\042\004\034\010\046" +
    "\012\030\013\035\014\036\032\023\033\022\035\032\001" +
    "\002\000\010\006\125\007\126\030\052\001\002\000\024" +
    "\003\042\004\034\010\046\012\030\013\035\014\036\032" +
    "\023\033\022\035\032\001\002\000\012\006\uffe9\007\uffe9" +
    "\011\uffe9\030\uffe9\001\002\000\006\007\130\030\052\001" +
    "\002\000\012\006\uffe8\007\uffe8\011\uffe8\030\uffe8\001\002" +
    "\000\012\006\uffdc\007\uffdc\011\uffdc\030\uffdc\001\002\000" +
    "\012\003\056\014\054\015\055\026\062\001\002\000\012" +
    "\006\uffda\007\uffda\011\uffda\030\uffda\001\002\000\012\006" +
    "\uffd8\007\uffd8\011\uffd8\030\uffd8\001\002\000\006\027\uffe6" +
    "\031\uffe6\001\002\000\020\006\uffe0\007\uffe0\011\uffe0\027" +
    "\uffe0\030\uffe0\031\uffe0\037\106\001\002\000\016\006\uffde" +
    "\007\uffde\011\uffde\027\uffde\030\uffde\031\uffde\001\002\000" +
    "\020\006\uffdf\007\uffdf\011\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\037\106\001\002\000\016\006\uffdd\007\uffdd\011\uffdd\027" +
    "\uffdd\030\uffdd\031\uffdd\001\002\000\006\007\143\030\052" +
    "\001\002\000\012\032\ufff6\033\ufff6\034\ufff6\036\ufff6\001" +
    "\002\000\004\026\145\001\002\000\010\027\146\032\023" +
    "\033\022\001\002\000\024\003\042\004\034\010\046\012" +
    "\030\013\035\014\036\032\023\033\022\035\032\001\002" +
    "\000\006\027\150\031\025\001\002\000\024\003\042\004" +
    "\034\010\046\012\030\013\035\014\036\032\023\033\022" +
    "\035\032\001\002\000\006\007\152\030\052\001\002\000" +
    "\012\032\ufff8\033\ufff8\034\ufff8\036\ufff8\001\002\000\006" +
    "\007\154\030\052\001\002\000\012\032\ufff5\033\ufff5\034" +
    "\ufff5\036\ufff5\001\002\000\006\007\156\030\052\001\002" +
    "\000\004\002\ufffd\001\002\000\004\002\uffff\001\002\000" +
    "\012\032\ufffc\033\ufffc\034\ufffc\036\ufffc\001\002\000\004" +
    "\026\162\001\002\000\010\027\163\032\023\033\022\001" +
    "\002\000\024\003\042\004\034\010\046\012\030\013\035" +
    "\014\036\032\023\033\022\035\032\001\002\000\006\027" +
    "\165\031\025\001\002\000\024\003\042\004\034\010\046" +
    "\012\030\013\035\014\036\032\023\033\022\035\032\001" +
    "\002\000\006\007\167\030\052\001\002\000\012\032\ufffa" +
    "\033\ufffa\034\ufffa\036\ufffa\001\002\000\006\007\171\030" +
    "\052\001\002\000\012\032\ufff7\033\ufff7\034\ufff7\036\ufff7" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\014\002\011\016\012\017\007\020\004\021" +
    "\013\001\001\000\002\001\001\000\006\017\156\021\157" +
    "\001\001\000\030\003\154\004\047\005\042\006\026\007" +
    "\046\010\032\011\044\023\043\025\040\026\036\027\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\023\025" +
    "\017\001\001\000\002\001\001\000\030\003\141\004\047" +
    "\005\042\006\026\007\046\010\032\011\044\023\043\025" +
    "\040\026\036\027\030\001\001\000\004\027\140\001\001" +
    "\000\004\027\136\001\001\000\002\001\001\000\004\025" +
    "\134\001\001\000\030\003\037\004\047\005\042\006\026" +
    "\007\046\010\032\011\044\023\043\025\040\026\036\027" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\130\013\060\014\057\015\056\001" +
    "\001\000\002\001\001\000\012\012\121\013\060\014\057" +
    "\015\056\001\001\000\012\012\120\013\060\014\057\015" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\050" +
    "\004\047\005\042\006\026\007\046\010\032\011\044\023" +
    "\043\025\040\026\036\027\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\103\005" +
    "\042\006\026\007\046\010\032\011\044\023\043\025\040" +
    "\026\036\027\030\001\001\000\012\012\062\013\060\014" +
    "\057\015\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\063\013\060\014\057\015\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\102\014\057\015\056\001\001\000\010" +
    "\013\101\014\057\015\056\001\001\000\010\013\100\014" +
    "\057\015\056\001\001\000\006\014\077\015\056\001\001" +
    "\000\006\014\072\015\056\001\001\000\002\001\001\000" +
    "\004\015\076\001\001\000\004\015\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\012\111\013" +
    "\060\014\057\015\056\024\112\001\001\000\012\012\110" +
    "\013\060\014\057\015\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\115\013\060" +
    "\014\057\015\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\123\004\047\005\042\006" +
    "\026\007\046\010\032\011\044\023\043\025\040\026\036" +
    "\027\030\001\001\000\002\001\001\000\030\003\126\004" +
    "\047\005\042\006\026\007\046\010\032\011\044\023\043" +
    "\025\040\026\036\027\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\132\013\060\014\057\015\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\146\025\017\001\001\000\030\003\152\004\047\005" +
    "\042\006\026\007\046\010\032\011\044\023\043\025\040" +
    "\026\036\027\030\001\001\000\002\001\001\000\030\003" +
    "\150\004\047\005\042\006\026\007\046\010\032\011\044" +
    "\023\043\025\040\026\036\027\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\163\025\017" +
    "\001\001\000\030\003\167\004\047\005\042\006\026\007" +
    "\046\010\032\011\044\023\043\025\040\026\036\027\030" +
    "\001\001\000\002\001\001\000\030\003\165\004\047\005" +
    "\042\006\026\007\046\010\032\011\044\023\043\025\040" +
    "\026\036\027\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




/***********
SymbolFactory es una nueva caracteristica que ha sido anadida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
, esto debido a que dicha clase no provee mucha informacion de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/
***********/
	public static void main(String args[]) throws Exception {
		SymbolFactory sf = new DefaultSymbolFactory();
		parser parser_obj;
		
                Scanner lexico; 
	 
		  lexico = new Scanner(
		  	new java.io.FileInputStream
		  	("C:/Users/Rosmir/Desktop/compiladores/Tiny/ejemplo_fuente/factorial.tny"),sf);
		  parser_obj=new parser(lexico,sf);

		/*if (args.length==0) 
			parser_obj=new parser(new Scanner(System.in,sf),sf);
		else 
			parser_obj=new parser(new Scanner(new java.io.FileInputStream((new java.io.FileInputStream(
				" C:/Users/cuenta.inscripcion/Desktop/Tiny/ejemplo_fuente/suma.tny")),sf),sf);
*/
		parser_obj.parse();
		NodoBase root=parser_obj.action_obj.getASTroot();
		System.out.println();
		System.out.println("IMPRESION DEL AST GENERADO");
		System.out.println();
		ast.Util.imprimirAST(root);
		TablaSimbolos ts = new TablaSimbolos();
		ts.cargarTabla(root);
		ts.ImprimirClaves();
		tiny.Generador.setTablaSimbolos(ts);
		tiny.Generador.generarCodigoObjeto(root);
	}
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	private boolean debug=true;
	private NodoBase ast=null;
	private int lineanum=0;
	private int ambito=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}
	

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= error 
            {
              NodoBase RESULT =null;
		 if(debug) System.out.println("\t regla 12d"); 
				System.out.println("Ocurrio error en cup # 0003");
				RESULT=null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // factor ::= ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 12c"); 
					if(variable!=null){
						System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
						RESULT= new NodoIdentificador(variable.toString());		
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // factor ::= NUM 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 12b"); 
					System.out.println("Devolvi nodo numero entero");
					if(valor!=null){
						RESULT= new NodoValor(Integer.parseInt(valor));					
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // factor ::= LPAREN exp RPAREN 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t regla 12a"); 
							RESULT = ex;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // term ::= factor 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 11c"); 
					RESULT=ex;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // term ::= term OVER factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 11b"); 
						RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // term ::= term TIMES factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 11a"); 
							RESULT = new NodoOperacion(exI,tipoOp.por,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // simple_exp ::= term 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 10c"); 
				RESULT=ex;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // simple_exp ::= simple_exp MINUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 10b"); 
							RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // simple_exp ::= simple_exp PLUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 10a"); 
							RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= simple_exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 9c"); 
					RESULT = ex;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= simple_exp EQ simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 9b"); 
							RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= simple_exp GT simple_exp 
            {
              NodoBase RESULT =null;
		int exAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exA = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exBleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exBright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exB = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 9a"); 
								RESULT = new NodoOperacion(exA,tipoOp.mayor,exB);
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= simple_exp LT simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 9a"); 
								RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // write_stmt ::= WRITE exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 8"); 
					RESULT= new NodoEscribir(ex);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // read_stmt ::= READ ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 7"); 
					System.out.println("Leyendo Variable");
					if(variable!=null)
					RESULT = new NodoLeer(variable.toString());
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0002");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // vector ::= ID LCOR NUM RCOR 
            {
              NodoBase RESULT =null;
		int varileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String vari = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tamvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tamvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tamv = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t regla 11  ");
							if(vari!=null)
								RESULT = new NodoVector(vari.toString(), Integer.parseInt(tamv));
							else{
								RESULT = null;
								System.out.println("Ocurrio error en cup # 0001");
								}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // assign_stmt ::= vector ASSIGN exp 
            {
              NodoBase RESULT =null;
		int vcasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vcasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase vcas = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exv = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 10 parte final");
							 
								RESULT = new NodoAsignacion(vcas,exv);
							 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // assign_stmt ::= ID ASSIGN exp 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 10 parte final");
							if(variable!=null)
								RESULT = new NodoAsignacion(variable.toString(),ex);
							else{
								RESULT = null;
								System.out.println("Ocurrio error en cup # 0001");
								}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // return_stmt ::= RETURN exp 
            {
              NodoBase RESULT =null;
		int retmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int retmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase retm = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			 if(debug) System.out.println("\t regla 9"); 
			  	 		System.out.println("\t return"); 
			  	 		RESULT= new NodoReturn(retm);
			   		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_stmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declare_var ::= BOOLEAN vector 
            {
              NodoBase RESULT =null;
		int dsdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase dsd = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			 if(debug) System.out.println("\t regla 8a"); 
			  	 		System.out.println("\t dec"); 
			  	 		RESULT= new NodoDeclaracion(dsd, "BOOLEAN");
			   	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare_var",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declare_var ::= INT vector 
            {
              NodoBase RESULT =null;
		int dsdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase dsd = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			 if(debug) System.out.println("\t regla 8a"); 
			  	 		System.out.println("\t dec"); 
			  	 		RESULT= new NodoDeclaracion(dsd,"INT");
			   	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare_var",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declare_var ::= BOOLEAN ID 
            {
              NodoBase RESULT =null;
		int idvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String idv = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			 if(debug) System.out.println("\t regla 8a"); 
			  	 		System.out.println("\t dec"); 
			  	 		RESULT= new NodoDeclaracion(idv.toString(),"INT");
			   	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare_var",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declare_var ::= INT ID 
            {
              NodoBase RESULT =null;
		int idvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String idv = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			 if(debug) System.out.println("\t regla 8a"); 
			  	 		System.out.println("\t dec"); 
			  	 		RESULT= new NodoDeclaracion(idv.toString(),"INT");
			   	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare_var",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // params_call ::= 
            {
              NodoBase RESULT =null;
		 if(debug) System.out.println("\t ** Empty **"); 
		      		RESULT=null;
		      	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params_call",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // params_call ::= exp 
            {
              NodoBase RESULT =null;
		int exzzleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exzzright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exzz = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 7b"); 
				       RESULT=exzz;				
				     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params_call",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // params_call ::= params_call COMMA exp 
            {
              NodoBase RESULT =null;
		int psdllleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int psdllright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase psdll = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase expss = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 7a"); 
						NodoBase hijoActual = psdll;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(expss);
							RESULT=psdll;
						}else{
							RESULT=expss;
						}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params_call",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // call_stmt ::= ID LPAREN params_call RPAREN 
            {
              NodoBase RESULT =null;
		int nmsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nmsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String nms = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pmllleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pmllright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pmll = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					if(debug) System.out.println("\t Llamado a Funcion"); 
					RESULT=new NodoCall(nms.toString(),pmll);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt_params ::= declare_var 
            {
              NodoBase RESULT =null;
		int dccvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dccvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase dccv = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(debug) System.out.println("\t regla 6b"); 
				       RESULT=dccv;				
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_params",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt_params ::= stmt_params COMMA declare_var 
            {
              NodoBase RESULT =null;
		int stparleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stparright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase stpar = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int decvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase decv = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 6a"); 
						NodoBase hijoActual = stpar;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(decv);
							RESULT=stpar;
						}else{
							RESULT=decv;
						}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_params",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // repeat_stmt ::= REPEAT stmt_seq UNTIL exp 
            {
              NodoBase RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pruebaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pruebaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase prueba = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 5"); 
							RESULT = new NodoRepeat(cuerpo,prueba);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // if_stmt ::= IF exp THEN stmt_seq ELSE stmt_seq END 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pelseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pelseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pelse = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t regla 4b"); 
									RESULT = new NodoIf(ex,pthen,pelse);		
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // if_stmt ::= IF exp THEN stmt_seq END 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t regla 4a"); 
									RESULT = new NodoIf(ex,pthen);
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= error 
            {
              NodoBase RESULT =null;
		 if(debug) System.out.println("\t regla 3i"); 
								   System.out.println("Ocurrio error en cup # 0004");
									RESULT=null;
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= call_stmt 
            {
              NodoBase RESULT =null;
		int cllstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cllstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase cllst = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 3h"); 
									RESULT=cllst;
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= return_stmt 
            {
              NodoBase RESULT =null;
		int rtstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rtstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase rtst = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 3g"); 
									RESULT=rtst;
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= declare_var 
            {
              NodoBase RESULT =null;
		int dclvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dclvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase dclv = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 3f"); 
									RESULT=dclv;
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= write_stmt 
            {
              NodoBase RESULT =null;
		int sescleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sescright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sesc = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 3e"); 
									RESULT=sesc;
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= read_stmt 
            {
              NodoBase RESULT =null;
		int slecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase slec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 3d"); 
									RESULT=slec;
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= assign_stmt 
            {
              NodoBase RESULT =null;
		int sasileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sasiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sasi = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 3c"); 
									RESULT=sasi;
						         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= repeat_stmt 
            {
              NodoBase RESULT =null;
		int srepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int srepright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase srep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 3b"); 
									RESULT=srep;
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= if_stmt 
            {
              NodoBase RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sif = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 3a"); 
									RESULT=sif;
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt_seq ::= stmt 
            {
              NodoBase RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 2b"); 
				               RESULT=sent;				
				            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt_seq ::= stmt_seq SEMI stmt 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 2a"); 
						NodoBase hijoActual = ini;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=ini;
						}else{
							RESULT=sent;
						}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // function_stmt ::= BOOLEAN ID LPAREN RPAREN stmt_seq END 
            {
              NodoBase RESULT =null;
		int nomfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nomfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String nomf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase sds = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t funcion boolean "); 

				     RESULT=new NodoFuncion("BOOLEAN", nomf.toString(),sds); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // function_stmt ::= VOID ID LPAREN RPAREN stmt_seq END 
            {
              NodoBase RESULT =null;
		int nomfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nomfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String nomf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase sds = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t funcion void "); 

				     RESULT=new NodoFuncion("VOID", nomf.toString(),sds); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // function_stmt ::= INT ID LPAREN RPAREN stmt_seq END 
            {
              NodoBase RESULT =null;
		int nomfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nomfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String nomf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase sds = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t funcion int "); 

				     RESULT=new NodoFuncion("INT", nomf.toString(),sds); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // function_stmt ::= BOOLEAN ID LPAREN stmt_params RPAREN stmt_seq END 
            {
              NodoBase RESULT =null;
		int nomfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nomfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String nomf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int stsmsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stsmsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase stsms = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase sds = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t funcion boolean "); 

				     RESULT=new NodoFuncion("BOOLEAN", nomf.toString(),stsms,sds); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // function_stmt ::= VOID ID LPAREN stmt_params RPAREN stmt_seq END 
            {
              NodoBase RESULT =null;
		int nomfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nomfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String nomf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int stsmsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stsmsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase stsms = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase sds = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t funcion void "); 

				     RESULT=new NodoFuncion("VOID", nomf.toString(),stsms,sds); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // function_stmt ::= INT ID LPAREN stmt_params RPAREN stmt_seq END 
            {
              NodoBase RESULT =null;
		int nomfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nomfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String nomf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int stsmsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stsmsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase stsms = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase sds = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t funcion int "); 

				     RESULT=new NodoFuncion("INT", nomf.toString(),stsms,sds); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function_list ::= function_stmt 
            {
              NodoBase RESULT =null;
		int fmsfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fmsfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fmsf = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              	   if(debug) System.out.println("\t regla 2b"); 
					RESULT=fmsf;				
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // function_list ::= function_list function_stmt 
            {
              NodoBase RESULT =null;
		int flisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase flis = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int flsdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flsdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase flsd = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 2a"); 
						NodoBase hijoActual = flis;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(flsd);
							RESULT=flis;
						}else{
							RESULT=flsd;
						}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // main_function ::= MAIN stmt_seq END 
            {
              NodoBase RESULT =null;
		int ssqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ssq = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("\t Bloque principal");
					RESULT=ssq;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_function",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // block_prog ::= main_function 
            {
              NodoBase RESULT =null;
		int msfsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int msfsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase msfs = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					System.out.println("\t ONLY MAIN");
					RESULT = new NodoMain(null,msfs,ambito);
					ambito++; 
				   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_prog",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // block_prog ::= function_list main_function 
            {
              NodoBase RESULT =null;
		int flsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int flsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase fls = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase mss = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					System.out.println("\t FUNCTIONS and MAIN");
					RESULT = new NodoMain(fls,mss,ambito);
					ambito++; 
				   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_prog",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= block_prog 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 1"); 
					ast = s;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

